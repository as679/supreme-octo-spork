---
- hosts: masters[0]
  tags: controlplane_init
  gather_facts: no
  become: yes
  tasks:
  - name: Initial Master | Copy kubeadm config
    copy:
      src: ./outputs/kubeadm-config.yml
      dest: /home/admin/init-kubeadm-config.yml
  - name: Initial Master | Initialise kubeadm
    shell: kubeadm init --config /home/admin/init-kubeadm-config.yml
    register: kubeadm_init
  - name: Initial Master | Collect certificate key
    shell: kubeadm certs certificate-key
    register: cert_key
    changed_when: no
  - name: Initial Master | Upload certificates
    shell: kubeadm init phase upload-certs --upload-certs --certificate-key {{ cert_key.stdout }}
    register: kubeadm_phase
  - name: Initial Master | Collect the token
    shell: kubeadm token list | grep authentication | cut -d' ' -f1
    register: kubeadm_token
    changed_when: no
  - name: Initial Master | Collect the hash value
    shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
    register: kubeadm_hash
    changed_when: no
  - name: Initial Master | Create kubeconfig home directory
    file:
      path: /home/admin/.kube
      state: directory
      owner: admin
      group: admin
      mode: '0700'
  - name: Initial Master | Copy kubeconfig file
    copy:
      remote_src: yes
      src: /etc/kubernetes/admin.conf
      dest: /home/admin/.kube/config
      owner: admin
      group: admin
      mode: '0600'
  - name: Initial Master | Apply Canal CNI
    shell: kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://docs.projectcalico.org/manifests/canal.yaml
    register: kubectl_cni
    when: cni == "canal"
  - name: Initial Master | Apply AWS CNI
    shell: kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/master/config/v1.8/aws-k8s-cni.yaml
    register: kubectl_cni
    when: cni == "aws"

- hosts: masters:!masters[0]
  tags: controlplane_join
  become: yes
  tasks:
  - name: Control Plane | Template the kubeadm config
    template:
      src: ./ansible/templates/cp.kubeadm-config.yml.j2
      dest: /home/admin/cp-join-kubeadm-config.yml
  - name: Control Plane | Initialise the control plane
    shell: kubeadm join --config /home/admin/cp-join-kubeadm-config.yml
    register: kubeadm_join_cp

- hosts: workers
  tags: dataplane_join
  become: yes
  tasks:
  - name: Workers | Template the kubeadm config
    template:
      src: ./ansible/templates/w.kubeadm-config.yml.j2
      dest: /home/admin/dp-join-kubeadm-config.yml
  - name: Workers | Initialise the workers
    shell: kubeadm join --config /home/admin/dp-join-kubeadm-config.yml
    register: kubeadm_join_dp

- hosts: masters[0]
  tags: postinstall
  gather_facts: no
  environment:
    K8S_AUTH_KUBECONFIG: /home/admin/.kube/config
  tasks:
  - name: Post Install | Create manifests directory
    file:
      path: /home/admin/manifests
      state: directory
  - name: Post Install | Install Helm v3
    shell: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    register: install_helm
  - name: Post Install | Install storage class
    k8s:
      state: present
      definition: "{{ lookup('file', './ansible/files/storage-class.yml') }}"
  - name: Post Install | Install metrics-server
    k8s:
      state: present
      definition: "{{ lookup('file', './ansible/files/metrics-server.yml') }}"
  - name: Post Install | Collect hosted zone ID
    shell: aws route53 list-hosted-zones-by-name --output json --dns-name {{ domain_name }} | jq -r '.HostedZones[0].Id'
    register: hosted_zone
  - name: Post Install | Install external-dns.yml
    k8s:
      state: present
      definition: "{{ lookup('template', './ansible/templates/external-dns.yml.j2') }}"
  - name: Post Install | Install dashboard.yml
    k8s:
      state: present
      definition: "{{ lookup('template', './ansible/templates/dashboard.yml.j2') }}"
  - block:
      - name: Post Install | Install Ingress - ProjectContour
        get_url:
          url: https://projectcontour.io/quickstart/contour.yaml
          dest: /home/admin/manifests/contour.yaml
      - k8s:
          state: present
          src: /home/admin/manifests/contour.yaml
    when: ingress_class == "contour"
  - name: Post Install | Template the Prometheus Overrides YAML
    template:
      src: ./ansible/templates/prometheus-overrides.yml.j2
      dest: /home/admin/manifests/prometheus-overrides.yml
  - name: Post Install | Add Prometheus Helm repo
    shell: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  - name: Post Install | Update Helm repos
    shell: helm repo update
  - name: Post Install | Create the Monitoring namespace
    k8s:
      name: monitoring
      api_version: v1
      kind: Namespace
      state: present
  - name: Post Install | Install Prometheus
    shell: helm install monitoring prometheus-community/kube-prometheus-stack -n monitoring -f /home/admin/manifests/prometheus-overrides.yml
    ignore_errors: yes
  - name: Post Install | Create TLS material
    shell: openssl req -newkey rsa:2048 -nodes -keyout grafana.key -x509 -days 365 -out grafana.crt -subj "/CN=grafana.{{ cluster_name }}.{{ domain_name }}"
  - name: Post Install | Install Grafana TLS
    shell: kubectl create secret tls grafana-tls --cert grafana.crt --key grafana.key -n monitoring
  - name: Post Install | Install Grafana Ingress
    k8s:
      state: present
      definition: "{{ lookup('template', './ansible/templates/grafana-ingress.yml.j2') }}"

